// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User Model - Authentication and Profile
model User {
  id          Int       @id @default(autoincrement())
  username    String    @unique
  email       String    @unique
  passwordHash String   @map("password_hash")
  isAdmin     Boolean   @default(false) @map("is_admin")
  
  // Flexible profile fields
  displayName String?   @map("display_name")
  avatarUrl   String?   @map("avatar_url")
  preferences Json?     // Flexible user preferences storage
  
  // Timestamps
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  lastLoginAt DateTime? @map("last_login_at")
  
  // Relations
  boards      Board[]
  workSessions WorkSession[]
  
  @@map("users")
}

// Board Model - GAPS Diagrams  
model Board {
  id          Int      @id @default(autoincrement())
  title       String
  description String?  // Optional board description
  
  // User ownership
  userId      Int      @map("user_id")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Board settings and metadata
  isTemplate  Boolean  @default(false) @map("is_template")
  isPublic    Boolean  @default(false) @map("is_public")
  shareCode   String?  @unique @map("share_code") // For sharing boards
  settings    Json?    // Flexible board configuration
  metadata    Json?    // Extensible metadata storage
  
  // Timestamps
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  // Relations
  thoughts    Thought[]
  workSessions WorkSession[]
  conversations Conversation[]
  
  @@map("boards")
}

// Thought Model - Individual GAPS items
model Thought {
  id        Int      @id @default(autoincrement())
  content   String
  section   String   // status, goal, analysis, plan
  
  // Board ownership
  boardId   Int      @map("board_id")
  board     Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  
  // Positioning and organization
  position  Int?     // Order within section
  tags      Json?    // Flexible tagging system
  priority  String?  // low, medium, high
  status    String?  // e.g., "pending", "in_progress", "completed"
  
  // AI and collaboration features
  aiGenerated Boolean @default(false) @map("ai_generated")
  confidence  Float?  // AI confidence score if applicable
  metadata    Json?   // Extensible metadata
  
  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  @@map("thoughts")
}

// WorkSession Model - A working session on a board (replaces MeetingMinute)
model WorkSession {
  id          Int      @id @default(autoincrement())
  title       String?  // Optional session title
  description String?  // What was accomplished in this session
  
  // Board context (REQUIRED - sessions always belong to a board)
  boardId     Int      @map("board_id")
  board       Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  
  // User who created/owns this session
  userId      Int      @map("user_id")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Session metadata
  sessionId   String   @unique @map("session_id") // Unique session identifier
  isActive    Boolean  @default(true) @map("is_active") // Is session ongoing?
  metadata    Json?    // Additional session context
  
  // Timestamps
  startedAt   DateTime @default(now()) @map("started_at")
  endedAt     DateTime? @map("ended_at")
  
  // Relations - things that happen within this session
  activityLogs      ActivityLog[]
  
  @@map("work_sessions")
}

// ActivityLog Model - Individual actions taken during a session
model ActivityLog {
  id         Int      @id @default(autoincrement())
  action     String   // add, edit, delete, move, ai_suggest, etc.
  detail     String   // Description of the action
  
  // Session context (REQUIRED - activities always happen in a session)
  sessionId  Int      @map("session_id")
  session    WorkSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  
  // Change tracking
  entityType String?  @map("entity_type") // thought, board, etc.
  entityId   Int?     @map("entity_id")   // ID of changed entity
  oldValue   Json?    @map("old_value")   // Previous state
  newValue   Json?    @map("new_value")   // New state
  
  // Metadata
  metadata   Json?    // Additional context
  
  timestamp  DateTime @default(now())
  
  @@map("activity_logs")
}

// Conversation Model - AI chat conversations within a board
model Conversation {
  id          Int       @id @default(autoincrement())
  title       String?   // Optional conversation title
  
  // Board context (REQUIRED - conversations always belong to a board)
  boardId     Int       @map("board_id")
  board       Board     @relation(fields: [boardId], references: [id], onDelete: Cascade)
  
  // Conversation metadata
  model       String?   // which AI model is being used
  systemPrompt String?  @map("system_prompt") // System prompt for this conversation
  messageCount Int      @default(0) @map("message_count") // Number of messages
  summary     String?   // Optional conversation summary
  metadata    Json?     // Additional conversation context
  
  // Timestamps
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  
  // Relations
  messages    Message[]
  
  @@map("conversations")
}

// Message Model - Individual messages within a conversation
model Message {
  id             Int          @id @default(autoincrement())
  role           String       // human, ai, system, function
  content        String
  
  // Conversation context (REQUIRED - messages always belong to a conversation)
  conversationId Int          @map("conversation_id")
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  // Message metadata
  sequenceNumber Int          @map("sequence_number") // Order within conversation
  model          String?      // which AI model was used for this message
  tokens         Int?         // token count if available
  metadata       Json?        // Additional message context
  
  // Timestamps
  createdAt      DateTime     @default(now()) @map("created_at")
  
  @@map("messages")
}
